import 'package:bloc/bloc.dart';

enum CounterEvent {increment, decrement}

class CounterBloc extends Bloc<CounterEvent,int>{
  CounterBloc() : super(0);

  @override
  Stream<int> mapEventToState(CounterEvent event) async*{
    switch(event){
        case CounterEvent.increment:
        yield state + 1;
        break;
        case CounterEvent.decrement:
        yield state - 1;
        break;
    }
    throw UnimplementedError();
  }
}

Future<void> main(List<String> args) async {
  final bloc = CounterBloc();

  final steamSubscription = bloc.listen(print);

  bloc.add(CounterEvent.increment);// till here output is : 1
  bloc.add(CounterEvent.increment);
  bloc.add(CounterEvent.increment);

  bloc.add(CounterEvent.decrement);
  bloc.add(CounterEvent.decrement);
  bloc.add(CounterEvent.decrement);

  await Future.delayed(Duration.zero);
  await steamSubscription.cancel();
  await bloc.close();

}






